pipeline {
    agent any

    environment {
        DOCKER_IMAGE_NAME = "bhargavilakamsani/tomcatnew:${BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                checkout scmGit(branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/Bhargavi-lakamsani/hello-world-war.git']])
            }
        }

        stage('Build') {
            steps {
                script {
                    echo "Building Docker image with tag: ${DOCKER_IMAGE_NAME}"
                }
                sh 'docker build -t ${DOCKER_IMAGE_NAME} .'
            }
        }

        stage('Push') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'bhargavi-docker', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                    sh '''
                    echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin
                    docker push ${DOCKER_IMAGE_NAME}
                    '''
                }
            }
        }

        stage('Configure Kubernetes') {
            steps {
                withCredentials([file(credentialsId: 'kubeconfig-file', variable: 'KUBECONFIG_FILE')]) {
                    script {
                        echo "Setting up Kubernetes context"
                        sh '''
                        export KUBECONFIG=${KUBECONFIG_FILE}
                        kubectl config current-context
                        kubectl config get-contexts
                        kubectl config use-context bhargavi@demo-ekscluster.ap-south-1.eksctl.io
                        '''
                    }
                }
            }
        }

        stage('Deployment') {
            steps {
                script {
                    sh '''
                    cd helloworld
                    helm upgrade helloworld
                    '''
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
